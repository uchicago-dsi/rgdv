//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = ""
  strings.forEach((string, i) => {
    str += string + (args[i] || "")
  })
  return str
}
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never }
export type Incremental<T> = T | { [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any }
  JSON: { input: any; output: any }
}

export type SystemInfo = {
  __typename?: "SystemInfo"
  filename: Scalars["String"]["output"]
  title?: Maybe<Scalars["String"]["output"]>
  basename: Scalars["String"]["output"]
  breadcrumbs: Array<Scalars["String"]["output"]>
  path: Scalars["String"]["output"]
  relativePath: Scalars["String"]["output"]
  extension: Scalars["String"]["output"]
  template: Scalars["String"]["output"]
  collection: Collection
}

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars["Boolean"]["input"]>
}

export type Folder = {
  __typename?: "Folder"
  name: Scalars["String"]["output"]
  path: Scalars["String"]["output"]
}

export type PageInfo = {
  __typename?: "PageInfo"
  hasPreviousPage: Scalars["Boolean"]["output"]
  hasNextPage: Scalars["Boolean"]["output"]
  startCursor: Scalars["String"]["output"]
  endCursor: Scalars["String"]["output"]
}

export type Node = {
  id: Scalars["ID"]["output"]
}

export type Document = {
  id: Scalars["ID"]["output"]
  _sys?: Maybe<SystemInfo>
  _values: Scalars["JSON"]["output"]
}

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars["Float"]["output"]
  pageInfo: PageInfo
}

export type Query = {
  __typename?: "Query"
  getOptimizedQuery?: Maybe<Scalars["String"]["output"]>
  collection: Collection
  collections: Array<Collection>
  node: Node
  document: DocumentNode
  page: Page
  pageConnection: PageConnection
  post: Post
  postConnection: PostConnection
  nav: Nav
  navConnection: NavConnection
  statistics: Statistics
  statisticsConnection: StatisticsConnection
}

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars["String"]["input"]
}

export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<PageFilter>
}

export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<PostFilter>
}

export type QueryNavArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryNavConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<NavFilter>
}

export type QueryStatisticsArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type QueryStatisticsConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<StatisticsFilter>
}

export type DocumentFilter = {
  page?: InputMaybe<PageFilter>
  post?: InputMaybe<PostFilter>
  nav?: InputMaybe<NavFilter>
  statistics?: InputMaybe<StatisticsFilter>
}

export type DocumentConnectionEdges = {
  __typename?: "DocumentConnectionEdges"
  cursor: Scalars["String"]["output"]
  node?: Maybe<DocumentNode>
}

export type DocumentConnection = Connection & {
  __typename?: "DocumentConnection"
  pageInfo: PageInfo
  totalCount: Scalars["Float"]["output"]
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>
}

export type Collection = {
  __typename?: "Collection"
  name: Scalars["String"]["output"]
  slug: Scalars["String"]["output"]
  label?: Maybe<Scalars["String"]["output"]>
  path: Scalars["String"]["output"]
  format?: Maybe<Scalars["String"]["output"]>
  matches?: Maybe<Scalars["String"]["output"]>
  templates?: Maybe<Array<Maybe<Scalars["JSON"]["output"]>>>
  fields?: Maybe<Array<Maybe<Scalars["JSON"]["output"]>>>
  documents: DocumentConnection
}

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<DocumentFilter>
  folder?: InputMaybe<Scalars["String"]["input"]>
}

export type DocumentNode = Page | Post | Nav | Statistics | Folder

export type PageSections = {
  __typename?: "PageSections"
  title?: Maybe<Scalars["String"]["output"]>
  body?: Maybe<Scalars["JSON"]["output"]>
}

export type Page = Node &
  Document & {
    __typename?: "Page"
    body?: Maybe<Scalars["JSON"]["output"]>
    sections?: Maybe<Array<Maybe<PageSections>>>
    id: Scalars["ID"]["output"]
    _sys: SystemInfo
    _values: Scalars["JSON"]["output"]
  }

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>
  eq?: InputMaybe<Scalars["String"]["input"]>
  exists?: InputMaybe<Scalars["Boolean"]["input"]>
}

export type StringFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>
  eq?: InputMaybe<Scalars["String"]["input"]>
  exists?: InputMaybe<Scalars["Boolean"]["input"]>
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>
}

export type PageSectionsFilter = {
  title?: InputMaybe<StringFilter>
  body?: InputMaybe<RichTextFilter>
}

export type PageFilter = {
  body?: InputMaybe<RichTextFilter>
  sections?: InputMaybe<PageSectionsFilter>
}

export type PageConnectionEdges = {
  __typename?: "PageConnectionEdges"
  cursor: Scalars["String"]["output"]
  node?: Maybe<Page>
}

export type PageConnection = Connection & {
  __typename?: "PageConnection"
  pageInfo: PageInfo
  totalCount: Scalars["Float"]["output"]
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>
}

export type Post = Node &
  Document & {
    __typename?: "Post"
    title?: Maybe<Scalars["String"]["output"]>
    mainImage?: Maybe<Scalars["String"]["output"]>
    shortText?: Maybe<Scalars["String"]["output"]>
    body?: Maybe<Scalars["JSON"]["output"]>
    id: Scalars["ID"]["output"]
    _sys: SystemInfo
    _values: Scalars["JSON"]["output"]
  }

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>
  eq?: InputMaybe<Scalars["String"]["input"]>
  exists?: InputMaybe<Scalars["Boolean"]["input"]>
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>
}

export type PostBodyWidgetFilter = {
  widget?: InputMaybe<StringFilter>
}

export type PostBodyFilter = {
  widget?: InputMaybe<PostBodyWidgetFilter>
}

export type PostFilter = {
  title?: InputMaybe<StringFilter>
  mainImage?: InputMaybe<ImageFilter>
  shortText?: InputMaybe<StringFilter>
  body?: InputMaybe<PostBodyFilter>
}

export type PostConnectionEdges = {
  __typename?: "PostConnectionEdges"
  cursor: Scalars["String"]["output"]
  node?: Maybe<Post>
}

export type PostConnection = Connection & {
  __typename?: "PostConnection"
  pageInfo: PageInfo
  totalCount: Scalars["Float"]["output"]
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>
}

export type NavLinksSublinks = {
  __typename?: "NavLinksSublinks"
  title?: Maybe<Scalars["String"]["output"]>
  path?: Maybe<Scalars["String"]["output"]>
}

export type NavLinks = {
  __typename?: "NavLinks"
  title?: Maybe<Scalars["String"]["output"]>
  path?: Maybe<Scalars["String"]["output"]>
  sublinks?: Maybe<Array<Maybe<NavLinksSublinks>>>
}

export type Nav = Node &
  Document & {
    __typename?: "Nav"
    title?: Maybe<Scalars["String"]["output"]>
    links?: Maybe<Array<Maybe<NavLinks>>>
    id: Scalars["ID"]["output"]
    _sys: SystemInfo
    _values: Scalars["JSON"]["output"]
  }

export type NavLinksSublinksFilter = {
  title?: InputMaybe<StringFilter>
  path?: InputMaybe<StringFilter>
}

export type NavLinksFilter = {
  title?: InputMaybe<StringFilter>
  path?: InputMaybe<StringFilter>
  sublinks?: InputMaybe<NavLinksSublinksFilter>
}

export type NavFilter = {
  title?: InputMaybe<StringFilter>
  links?: InputMaybe<NavLinksFilter>
}

export type NavConnectionEdges = {
  __typename?: "NavConnectionEdges"
  cursor: Scalars["String"]["output"]
  node?: Maybe<Nav>
}

export type NavConnection = Connection & {
  __typename?: "NavConnection"
  pageInfo: PageInfo
  totalCount: Scalars["Float"]["output"]
  edges?: Maybe<Array<Maybe<NavConnectionEdges>>>
}

export type StatisticsOverviewTemplates = {
  __typename?: "StatisticsOverviewTemplates"
  body?: Maybe<Scalars["JSON"]["output"]>
  threshold?: Maybe<Scalars["Float"]["output"]>
}

export type StatisticsOverview = {
  __typename?: "StatisticsOverview"
  title?: Maybe<Scalars["String"]["output"]>
  measure?: Maybe<Scalars["String"]["output"]>
  column_national?: Maybe<Scalars["String"]["output"]>
  column_state?: Maybe<Scalars["String"]["output"]>
  column_county?: Maybe<Scalars["String"]["output"]>
  tooltip?: Maybe<Scalars["JSON"]["output"]>
  templates?: Maybe<Array<Maybe<StatisticsOverviewTemplates>>>
}

export type StatisticsStatTemplates = {
  __typename?: "StatisticsStatTemplates"
  body?: Maybe<Scalars["JSON"]["output"]>
  threshold?: Maybe<Scalars["Float"]["output"]>
}

export type StatisticsStat = {
  __typename?: "StatisticsStat"
  title?: Maybe<Scalars["String"]["output"]>
  column?: Maybe<Scalars["String"]["output"]>
  tooltip?: Maybe<Scalars["JSON"]["output"]>
  templates?: Maybe<Array<Maybe<StatisticsStatTemplates>>>
}

export type Statistics = Node &
  Document & {
    __typename?: "Statistics"
    body?: Maybe<Scalars["JSON"]["output"]>
    overview?: Maybe<Array<Maybe<StatisticsOverview>>>
    stat?: Maybe<Array<Maybe<StatisticsStat>>>
    dataDescription?: Maybe<Scalars["JSON"]["output"]>
    id: Scalars["ID"]["output"]
    _sys: SystemInfo
    _values: Scalars["JSON"]["output"]
  }

export type NumberFilter = {
  lt?: InputMaybe<Scalars["Float"]["input"]>
  lte?: InputMaybe<Scalars["Float"]["input"]>
  gte?: InputMaybe<Scalars["Float"]["input"]>
  gt?: InputMaybe<Scalars["Float"]["input"]>
  eq?: InputMaybe<Scalars["Float"]["input"]>
  exists?: InputMaybe<Scalars["Boolean"]["input"]>
  in?: InputMaybe<Array<InputMaybe<Scalars["Float"]["input"]>>>
}

export type StatisticsOverviewTemplatesFilter = {
  body?: InputMaybe<RichTextFilter>
  threshold?: InputMaybe<NumberFilter>
}

export type StatisticsOverviewFilter = {
  title?: InputMaybe<StringFilter>
  measure?: InputMaybe<StringFilter>
  column_national?: InputMaybe<StringFilter>
  column_state?: InputMaybe<StringFilter>
  column_county?: InputMaybe<StringFilter>
  tooltip?: InputMaybe<RichTextFilter>
  templates?: InputMaybe<StatisticsOverviewTemplatesFilter>
}

export type StatisticsStatTemplatesFilter = {
  body?: InputMaybe<RichTextFilter>
  threshold?: InputMaybe<NumberFilter>
}

export type StatisticsStatFilter = {
  title?: InputMaybe<StringFilter>
  column?: InputMaybe<StringFilter>
  tooltip?: InputMaybe<RichTextFilter>
  templates?: InputMaybe<StatisticsStatTemplatesFilter>
}

export type StatisticsFilter = {
  body?: InputMaybe<RichTextFilter>
  overview?: InputMaybe<StatisticsOverviewFilter>
  stat?: InputMaybe<StatisticsStatFilter>
  dataDescription?: InputMaybe<RichTextFilter>
}

export type StatisticsConnectionEdges = {
  __typename?: "StatisticsConnectionEdges"
  cursor: Scalars["String"]["output"]
  node?: Maybe<Statistics>
}

export type StatisticsConnection = Connection & {
  __typename?: "StatisticsConnection"
  pageInfo: PageInfo
  totalCount: Scalars["Float"]["output"]
  edges?: Maybe<Array<Maybe<StatisticsConnectionEdges>>>
}

export type Mutation = {
  __typename?: "Mutation"
  addPendingDocument: DocumentNode
  updateDocument: DocumentNode
  deleteDocument: DocumentNode
  createDocument: DocumentNode
  updatePage: Page
  createPage: Page
  updatePost: Post
  createPost: Post
  updateNav: Nav
  createNav: Nav
  updateStatistics: Statistics
  createStatistics: Statistics
}

export type MutationAddPendingDocumentArgs = {
  collection: Scalars["String"]["input"]
  relativePath: Scalars["String"]["input"]
  template?: InputMaybe<Scalars["String"]["input"]>
}

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>
  relativePath: Scalars["String"]["input"]
  params: DocumentUpdateMutation
}

export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>
  relativePath: Scalars["String"]["input"]
}

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>
  relativePath: Scalars["String"]["input"]
  params: DocumentMutation
}

export type MutationUpdatePageArgs = {
  relativePath: Scalars["String"]["input"]
  params: PageMutation
}

export type MutationCreatePageArgs = {
  relativePath: Scalars["String"]["input"]
  params: PageMutation
}

export type MutationUpdatePostArgs = {
  relativePath: Scalars["String"]["input"]
  params: PostMutation
}

export type MutationCreatePostArgs = {
  relativePath: Scalars["String"]["input"]
  params: PostMutation
}

export type MutationUpdateNavArgs = {
  relativePath: Scalars["String"]["input"]
  params: NavMutation
}

export type MutationCreateNavArgs = {
  relativePath: Scalars["String"]["input"]
  params: NavMutation
}

export type MutationUpdateStatisticsArgs = {
  relativePath: Scalars["String"]["input"]
  params: StatisticsMutation
}

export type MutationCreateStatisticsArgs = {
  relativePath: Scalars["String"]["input"]
  params: StatisticsMutation
}

export type DocumentUpdateMutation = {
  page?: InputMaybe<PageMutation>
  post?: InputMaybe<PostMutation>
  nav?: InputMaybe<NavMutation>
  statistics?: InputMaybe<StatisticsMutation>
  relativePath?: InputMaybe<Scalars["String"]["input"]>
}

export type DocumentMutation = {
  page?: InputMaybe<PageMutation>
  post?: InputMaybe<PostMutation>
  nav?: InputMaybe<NavMutation>
  statistics?: InputMaybe<StatisticsMutation>
}

export type PageSectionsMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  body?: InputMaybe<Scalars["JSON"]["input"]>
}

export type PageMutation = {
  body?: InputMaybe<Scalars["JSON"]["input"]>
  sections?: InputMaybe<Array<InputMaybe<PageSectionsMutation>>>
}

export type PostMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  mainImage?: InputMaybe<Scalars["String"]["input"]>
  shortText?: InputMaybe<Scalars["String"]["input"]>
  body?: InputMaybe<Scalars["JSON"]["input"]>
}

export type NavLinksSublinksMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  path?: InputMaybe<Scalars["String"]["input"]>
}

export type NavLinksMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  path?: InputMaybe<Scalars["String"]["input"]>
  sublinks?: InputMaybe<Array<InputMaybe<NavLinksSublinksMutation>>>
}

export type NavMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  links?: InputMaybe<Array<InputMaybe<NavLinksMutation>>>
}

export type StatisticsOverviewTemplatesMutation = {
  body?: InputMaybe<Scalars["JSON"]["input"]>
  threshold?: InputMaybe<Scalars["Float"]["input"]>
}

export type StatisticsOverviewMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  measure?: InputMaybe<Scalars["String"]["input"]>
  column_national?: InputMaybe<Scalars["String"]["input"]>
  column_state?: InputMaybe<Scalars["String"]["input"]>
  column_county?: InputMaybe<Scalars["String"]["input"]>
  tooltip?: InputMaybe<Scalars["JSON"]["input"]>
  templates?: InputMaybe<Array<InputMaybe<StatisticsOverviewTemplatesMutation>>>
}

export type StatisticsStatTemplatesMutation = {
  body?: InputMaybe<Scalars["JSON"]["input"]>
  threshold?: InputMaybe<Scalars["Float"]["input"]>
}

export type StatisticsStatMutation = {
  title?: InputMaybe<Scalars["String"]["input"]>
  column?: InputMaybe<Scalars["String"]["input"]>
  tooltip?: InputMaybe<Scalars["JSON"]["input"]>
  templates?: InputMaybe<Array<InputMaybe<StatisticsStatTemplatesMutation>>>
}

export type StatisticsMutation = {
  body?: InputMaybe<Scalars["JSON"]["input"]>
  overview?: InputMaybe<Array<InputMaybe<StatisticsOverviewMutation>>>
  stat?: InputMaybe<Array<InputMaybe<StatisticsStatMutation>>>
  dataDescription?: InputMaybe<Scalars["JSON"]["input"]>
}

export type PagePartsFragment = {
  __typename: "Page"
  body?: any | null
  sections?: Array<{ __typename: "PageSections"; title?: string | null; body?: any | null } | null> | null
}

export type PostPartsFragment = {
  __typename: "Post"
  title?: string | null
  mainImage?: string | null
  shortText?: string | null
  body?: any | null
}

export type NavPartsFragment = {
  __typename: "Nav"
  title?: string | null
  links?: Array<{
    __typename: "NavLinks"
    title?: string | null
    path?: string | null
    sublinks?: Array<{ __typename: "NavLinksSublinks"; title?: string | null; path?: string | null } | null> | null
  } | null> | null
}

export type StatisticsPartsFragment = {
  __typename: "Statistics"
  body?: any | null
  dataDescription?: any | null
  overview?: Array<{
    __typename: "StatisticsOverview"
    title?: string | null
    measure?: string | null
    column_national?: string | null
    column_state?: string | null
    column_county?: string | null
    tooltip?: any | null
    templates?: Array<{
      __typename: "StatisticsOverviewTemplates"
      body?: any | null
      threshold?: number | null
    } | null> | null
  } | null> | null
  stat?: Array<{
    __typename: "StatisticsStat"
    title?: string | null
    column?: string | null
    tooltip?: any | null
    templates?: Array<{
      __typename: "StatisticsStatTemplates"
      body?: any | null
      threshold?: number | null
    } | null> | null
  } | null> | null
}

export type PageQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"]
}>

export type PageQuery = {
  __typename?: "Query"
  page: {
    __typename: "Page"
    id: string
    body?: any | null
    _sys: {
      __typename?: "SystemInfo"
      filename: string
      basename: string
      breadcrumbs: Array<string>
      path: string
      relativePath: string
      extension: string
    }
    sections?: Array<{ __typename: "PageSections"; title?: string | null; body?: any | null } | null> | null
  }
}

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<PageFilter>
}>

export type PageConnectionQuery = {
  __typename?: "Query"
  pageConnection: {
    __typename?: "PageConnection"
    totalCount: number
    pageInfo: {
      __typename?: "PageInfo"
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor: string
      endCursor: string
    }
    edges?: Array<{
      __typename?: "PageConnectionEdges"
      cursor: string
      node?: {
        __typename: "Page"
        id: string
        body?: any | null
        _sys: {
          __typename?: "SystemInfo"
          filename: string
          basename: string
          breadcrumbs: Array<string>
          path: string
          relativePath: string
          extension: string
        }
        sections?: Array<{ __typename: "PageSections"; title?: string | null; body?: any | null } | null> | null
      } | null
    } | null> | null
  }
}

export type PostQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"]
}>

export type PostQuery = {
  __typename?: "Query"
  post: {
    __typename: "Post"
    id: string
    title?: string | null
    mainImage?: string | null
    shortText?: string | null
    body?: any | null
    _sys: {
      __typename?: "SystemInfo"
      filename: string
      basename: string
      breadcrumbs: Array<string>
      path: string
      relativePath: string
      extension: string
    }
  }
}

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<PostFilter>
}>

export type PostConnectionQuery = {
  __typename?: "Query"
  postConnection: {
    __typename?: "PostConnection"
    totalCount: number
    pageInfo: {
      __typename?: "PageInfo"
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor: string
      endCursor: string
    }
    edges?: Array<{
      __typename?: "PostConnectionEdges"
      cursor: string
      node?: {
        __typename: "Post"
        id: string
        title?: string | null
        mainImage?: string | null
        shortText?: string | null
        body?: any | null
        _sys: {
          __typename?: "SystemInfo"
          filename: string
          basename: string
          breadcrumbs: Array<string>
          path: string
          relativePath: string
          extension: string
        }
      } | null
    } | null> | null
  }
}

export type NavQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"]
}>

export type NavQuery = {
  __typename?: "Query"
  nav: {
    __typename: "Nav"
    id: string
    title?: string | null
    _sys: {
      __typename?: "SystemInfo"
      filename: string
      basename: string
      breadcrumbs: Array<string>
      path: string
      relativePath: string
      extension: string
    }
    links?: Array<{
      __typename: "NavLinks"
      title?: string | null
      path?: string | null
      sublinks?: Array<{ __typename: "NavLinksSublinks"; title?: string | null; path?: string | null } | null> | null
    } | null> | null
  }
}

export type NavConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<NavFilter>
}>

export type NavConnectionQuery = {
  __typename?: "Query"
  navConnection: {
    __typename?: "NavConnection"
    totalCount: number
    pageInfo: {
      __typename?: "PageInfo"
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor: string
      endCursor: string
    }
    edges?: Array<{
      __typename?: "NavConnectionEdges"
      cursor: string
      node?: {
        __typename: "Nav"
        id: string
        title?: string | null
        _sys: {
          __typename?: "SystemInfo"
          filename: string
          basename: string
          breadcrumbs: Array<string>
          path: string
          relativePath: string
          extension: string
        }
        links?: Array<{
          __typename: "NavLinks"
          title?: string | null
          path?: string | null
          sublinks?: Array<{
            __typename: "NavLinksSublinks"
            title?: string | null
            path?: string | null
          } | null> | null
        } | null> | null
      } | null
    } | null> | null
  }
}

export type StatisticsQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"]
}>

export type StatisticsQuery = {
  __typename?: "Query"
  statistics: {
    __typename: "Statistics"
    id: string
    body?: any | null
    dataDescription?: any | null
    _sys: {
      __typename?: "SystemInfo"
      filename: string
      basename: string
      breadcrumbs: Array<string>
      path: string
      relativePath: string
      extension: string
    }
    overview?: Array<{
      __typename: "StatisticsOverview"
      title?: string | null
      measure?: string | null
      column_national?: string | null
      column_state?: string | null
      column_county?: string | null
      tooltip?: any | null
      templates?: Array<{
        __typename: "StatisticsOverviewTemplates"
        body?: any | null
        threshold?: number | null
      } | null> | null
    } | null> | null
    stat?: Array<{
      __typename: "StatisticsStat"
      title?: string | null
      column?: string | null
      tooltip?: any | null
      templates?: Array<{
        __typename: "StatisticsStatTemplates"
        body?: any | null
        threshold?: number | null
      } | null> | null
    } | null> | null
  }
}

export type StatisticsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>
  after?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Float"]["input"]>
  last?: InputMaybe<Scalars["Float"]["input"]>
  sort?: InputMaybe<Scalars["String"]["input"]>
  filter?: InputMaybe<StatisticsFilter>
}>

export type StatisticsConnectionQuery = {
  __typename?: "Query"
  statisticsConnection: {
    __typename?: "StatisticsConnection"
    totalCount: number
    pageInfo: {
      __typename?: "PageInfo"
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor: string
      endCursor: string
    }
    edges?: Array<{
      __typename?: "StatisticsConnectionEdges"
      cursor: string
      node?: {
        __typename: "Statistics"
        id: string
        body?: any | null
        dataDescription?: any | null
        _sys: {
          __typename?: "SystemInfo"
          filename: string
          basename: string
          breadcrumbs: Array<string>
          path: string
          relativePath: string
          extension: string
        }
        overview?: Array<{
          __typename: "StatisticsOverview"
          title?: string | null
          measure?: string | null
          column_national?: string | null
          column_state?: string | null
          column_county?: string | null
          tooltip?: any | null
          templates?: Array<{
            __typename: "StatisticsOverviewTemplates"
            body?: any | null
            threshold?: number | null
          } | null> | null
        } | null> | null
        stat?: Array<{
          __typename: "StatisticsStat"
          title?: string | null
          column?: string | null
          tooltip?: any | null
          templates?: Array<{
            __typename: "StatisticsStatTemplates"
            body?: any | null
            threshold?: number | null
          } | null> | null
        } | null> | null
      } | null
    } | null> | null
  }
}

export const PagePartsFragmentDoc = gql`
  fragment PageParts on Page {
    __typename
    body
    sections {
      __typename
      title
      body
    }
  }
`
export const PostPartsFragmentDoc = gql`
  fragment PostParts on Post {
    __typename
    title
    mainImage
    shortText
    body
  }
`
export const NavPartsFragmentDoc = gql`
  fragment NavParts on Nav {
    __typename
    title
    links {
      __typename
      title
      path
      sublinks {
        __typename
        title
        path
      }
    }
  }
`
export const StatisticsPartsFragmentDoc = gql`
  fragment StatisticsParts on Statistics {
    __typename
    body
    overview {
      __typename
      title
      measure
      column_national
      column_state
      column_county
      tooltip
      templates {
        __typename
        body
        threshold
      }
    }
    stat {
      __typename
      title
      column
      tooltip
      templates {
        __typename
        body
        threshold
      }
    }
    dataDescription
  }
`
export const PageDocument = gql`
  query page($relativePath: String!) {
    page(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...PageParts
    }
  }
  ${PagePartsFragmentDoc}
`
export const PageConnectionDocument = gql`
  query pageConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: PageFilter
  ) {
    pageConnection(before: $before, after: $after, first: $first, last: $last, sort: $sort, filter: $filter) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...PageParts
        }
      }
    }
  }
  ${PagePartsFragmentDoc}
`
export const PostDocument = gql`
  query post($relativePath: String!) {
    post(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...PostParts
    }
  }
  ${PostPartsFragmentDoc}
`
export const PostConnectionDocument = gql`
  query postConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: PostFilter
  ) {
    postConnection(before: $before, after: $after, first: $first, last: $last, sort: $sort, filter: $filter) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...PostParts
        }
      }
    }
  }
  ${PostPartsFragmentDoc}
`
export const NavDocument = gql`
  query nav($relativePath: String!) {
    nav(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...NavParts
    }
  }
  ${NavPartsFragmentDoc}
`
export const NavConnectionDocument = gql`
  query navConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NavFilter) {
    navConnection(before: $before, after: $after, first: $first, last: $last, sort: $sort, filter: $filter) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...NavParts
        }
      }
    }
  }
  ${NavPartsFragmentDoc}
`
export const StatisticsDocument = gql`
  query statistics($relativePath: String!) {
    statistics(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...StatisticsParts
    }
  }
  ${StatisticsPartsFragmentDoc}
`
export const StatisticsConnectionDocument = gql`
  query statisticsConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: StatisticsFilter
  ) {
    statisticsConnection(before: $before, after: $after, first: $first, last: $last, sort: $sort, filter: $filter) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...StatisticsParts
        }
      }
    }
  }
  ${StatisticsPartsFragmentDoc}
`
export type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
export function getSdk<C>(requester: Requester<C>) {
  return {
    page(
      variables: PageQueryVariables,
      options?: C
    ): Promise<{
      data: PageQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: PageQueryVariables
      query: string
    }> {
      return requester<
        {
          data: PageQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: PageQueryVariables
          query: string
        },
        PageQueryVariables
      >(PageDocument, variables, options)
    },
    pageConnection(
      variables?: PageConnectionQueryVariables,
      options?: C
    ): Promise<{
      data: PageConnectionQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: PageConnectionQueryVariables
      query: string
    }> {
      return requester<
        {
          data: PageConnectionQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: PageConnectionQueryVariables
          query: string
        },
        PageConnectionQueryVariables
      >(PageConnectionDocument, variables, options)
    },
    post(
      variables: PostQueryVariables,
      options?: C
    ): Promise<{
      data: PostQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: PostQueryVariables
      query: string
    }> {
      return requester<
        {
          data: PostQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: PostQueryVariables
          query: string
        },
        PostQueryVariables
      >(PostDocument, variables, options)
    },
    postConnection(
      variables?: PostConnectionQueryVariables,
      options?: C
    ): Promise<{
      data: PostConnectionQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: PostConnectionQueryVariables
      query: string
    }> {
      return requester<
        {
          data: PostConnectionQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: PostConnectionQueryVariables
          query: string
        },
        PostConnectionQueryVariables
      >(PostConnectionDocument, variables, options)
    },
    nav(
      variables: NavQueryVariables,
      options?: C
    ): Promise<{
      data: NavQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: NavQueryVariables
      query: string
    }> {
      return requester<
        {
          data: NavQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: NavQueryVariables
          query: string
        },
        NavQueryVariables
      >(NavDocument, variables, options)
    },
    navConnection(
      variables?: NavConnectionQueryVariables,
      options?: C
    ): Promise<{
      data: NavConnectionQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: NavConnectionQueryVariables
      query: string
    }> {
      return requester<
        {
          data: NavConnectionQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: NavConnectionQueryVariables
          query: string
        },
        NavConnectionQueryVariables
      >(NavConnectionDocument, variables, options)
    },
    statistics(
      variables: StatisticsQueryVariables,
      options?: C
    ): Promise<{
      data: StatisticsQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: StatisticsQueryVariables
      query: string
    }> {
      return requester<
        {
          data: StatisticsQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: StatisticsQueryVariables
          query: string
        },
        StatisticsQueryVariables
      >(StatisticsDocument, variables, options)
    },
    statisticsConnection(
      variables?: StatisticsConnectionQueryVariables,
      options?: C
    ): Promise<{
      data: StatisticsConnectionQuery
      errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
      variables: StatisticsConnectionQueryVariables
      query: string
    }> {
      return requester<
        {
          data: StatisticsConnectionQuery
          errors?: { message: string; locations: { line: number; column: number }[]; path: string[] }[]
          variables: StatisticsConnectionQueryVariables
          query: string
        },
        StatisticsConnectionQueryVariables
      >(StatisticsConnectionDocument, variables, options)
    },
  }
}
export type Sdk = ReturnType<typeof getSdk>

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client"

const generateRequester = (client: TinaClient, options?: { branch?: string }) => {
  const requester: (doc: any, vars?: any, options?: { branch?: string }, client) => Promise<any> = async (
    doc,
    vars,
    options
  ) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf("/")
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    })

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string
  }
) => {
  const requester = generateRequester(client, options)
  return getSdk(requester)
}
