# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  nav(relativePath: String): Nav!
  navConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavFilter): NavConnection!
  statistics(relativePath: String): Statistics!
  statisticsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StatisticsFilter): StatisticsConnection!
}

input DocumentFilter {
  page: PageFilter
  post: PostFilter
  nav: NavFilter
  statistics: StatisticsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Post | Nav | Statistics | Folder

type PageSections {
  title: String
  body: JSON
}

type Page implements Node & Document {
  body: JSON
  sections: [PageSections]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageSectionsFilter {
  title: StringFilter
  body: RichTextFilter
}

input PageFilter {
  body: RichTextFilter
  sections: PageSectionsFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Post implements Node & Document {
  title: String
  author: String
  date: String
  mainImage: String
  shortText: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostBodyPostWidgetFilter {
  widget: StringFilter
}

input PostBodyFilter {
  PostWidget: PostBodyPostWidgetFilter
}

input PostFilter {
  title: StringFilter
  author: StringFilter
  date: DatetimeFilter
  mainImage: ImageFilter
  shortText: StringFilter
  body: PostBodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type NavLinksSublinks {
  title: String
  path: String
}

type NavLinks {
  title: String
  path: String
  sublinks: [NavLinksSublinks]
}

type Nav implements Node & Document {
  title: String
  links: [NavLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavLinksSublinksFilter {
  title: StringFilter
  path: StringFilter
}

input NavLinksFilter {
  title: StringFilter
  path: StringFilter
  sublinks: NavLinksSublinksFilter
}

input NavFilter {
  title: StringFilter
  links: NavLinksFilter
}

type NavConnectionEdges {
  cursor: String!
  node: Nav
}

type NavConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavConnectionEdges]
}

type StatisticsOverviewTemplates {
  body: JSON
  threshold: Float
}

type StatisticsOverview {
  title: String
  measure: String
  column_national: String
  column_state: String
  column_county: String
  tooltip: JSON
  templates: [StatisticsOverviewTemplates]
}

type StatisticsStatTemplates {
  body: JSON
  threshold: Float
}

type StatisticsStat {
  title: String
  column: String
  tooltip: JSON
  templates: [StatisticsStatTemplates]
}

type Statistics implements Node & Document {
  body: JSON
  overview: [StatisticsOverview]
  stat: [StatisticsStat]
  dataDescription: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input StatisticsOverviewTemplatesFilter {
  body: RichTextFilter
  threshold: NumberFilter
}

input StatisticsOverviewFilter {
  title: StringFilter
  measure: StringFilter
  column_national: StringFilter
  column_state: StringFilter
  column_county: StringFilter
  tooltip: RichTextFilter
  templates: StatisticsOverviewTemplatesFilter
}

input StatisticsStatTemplatesFilter {
  body: RichTextFilter
  threshold: NumberFilter
}

input StatisticsStatFilter {
  title: StringFilter
  column: StringFilter
  tooltip: RichTextFilter
  templates: StatisticsStatTemplatesFilter
}

input StatisticsFilter {
  body: RichTextFilter
  overview: StatisticsOverviewFilter
  stat: StatisticsStatFilter
  dataDescription: RichTextFilter
}

type StatisticsConnectionEdges {
  cursor: String!
  node: Statistics
}

type StatisticsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StatisticsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateNav(relativePath: String!, params: NavMutation!): Nav!
  createNav(relativePath: String!, params: NavMutation!): Nav!
  updateStatistics(relativePath: String!, params: StatisticsMutation!): Statistics!
  createStatistics(relativePath: String!, params: StatisticsMutation!): Statistics!
}

input DocumentUpdateMutation {
  page: PageMutation
  post: PostMutation
  nav: NavMutation
  statistics: StatisticsMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  post: PostMutation
  nav: NavMutation
  statistics: StatisticsMutation
}

input PageSectionsMutation {
  title: String
  body: JSON
}

input PageMutation {
  body: JSON
  sections: [PageSectionsMutation]
}

input PostMutation {
  title: String
  author: String
  date: String
  mainImage: String
  shortText: String
  body: JSON
}

input NavLinksSublinksMutation {
  title: String
  path: String
}

input NavLinksMutation {
  title: String
  path: String
  sublinks: [NavLinksSublinksMutation]
}

input NavMutation {
  title: String
  links: [NavLinksMutation]
}

input StatisticsOverviewTemplatesMutation {
  body: JSON
  threshold: Float
}

input StatisticsOverviewMutation {
  title: String
  measure: String
  column_national: String
  column_state: String
  column_county: String
  tooltip: JSON
  templates: [StatisticsOverviewTemplatesMutation]
}

input StatisticsStatTemplatesMutation {
  body: JSON
  threshold: Float
}

input StatisticsStatMutation {
  title: String
  column: String
  tooltip: JSON
  templates: [StatisticsStatTemplatesMutation]
}

input StatisticsMutation {
  body: JSON
  overview: [StatisticsOverviewMutation]
  stat: [StatisticsStatMutation]
  dataDescription: JSON
}

schema {
  query: Query
  mutation: Mutation
}
